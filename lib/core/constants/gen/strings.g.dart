/// Generated file. Do not edit.
///
/// Original: lib/core/constants/localization
/// To regenerate, run: `dart run slang`
///
/// Locales: 1
/// Strings: 97
///
/// Built on 2024-09-14 at 13:49 UTC

// coverage:ignore-file
// ignore_for_file: type=lint

import 'package:flutter/widgets.dart';
import 'package:slang/builder/model/node.dart';
import 'package:slang_flutter/slang_flutter.dart';
export 'package:slang_flutter/slang_flutter.dart';

const AppLocale _baseLocale = AppLocale.ru;

/// Supported locales, see extension methods below.
///
/// Usage:
/// - LocaleSettings.setLocale(AppLocale.ru) // set locale
/// - Locale locale = AppLocale.ru.flutterLocale // get flutter locale from enum
/// - if (LocaleSettings.currentLocale == AppLocale.ru) // locale check
enum AppLocale with BaseAppLocale<AppLocale, Translations> {
  ru(languageCode: 'ru', build: Translations.build);

  const AppLocale(
      {required this.languageCode,
      this.scriptCode,
      this.countryCode,
      required this.build}); // ignore: unused_element

  @override
  final String languageCode;
  @override
  final String? scriptCode;
  @override
  final String? countryCode;
  @override
  final TranslationBuilder<AppLocale, Translations> build;

  /// Gets current instance managed by [LocaleSettings].
  Translations get translations =>
      LocaleSettings.instance.translationMap[this]!;
}

/// Method A: Simple
///
/// No rebuild after locale change.
/// Translation happens during initialization of the widget (call of t).
/// Configurable via 'translate_var'.
///
/// Usage:
/// String a = t.someKey.anotherKey;
/// String b = t['someKey.anotherKey']; // Only for edge cases!
Translations get t => LocaleSettings.instance.currentTranslations;

/// Method B: Advanced
///
/// All widgets using this method will trigger a rebuild when locale changes.
/// Use this if you have e.g. a settings page where the user can select the locale during runtime.
///
/// Step 1:
/// wrap your App with
/// TranslationProvider(
/// 	child: MyApp()
/// );
///
/// Step 2:
/// final t = Translations.of(context); // Get t variable.
/// String a = t.someKey.anotherKey; // Use t variable.
/// String b = t['someKey.anotherKey']; // Only for edge cases!
class TranslationProvider
    extends BaseTranslationProvider<AppLocale, Translations> {
  TranslationProvider({required super.child})
      : super(settings: LocaleSettings.instance);

  static InheritedLocaleData<AppLocale, Translations> of(
          BuildContext context) =>
      InheritedLocaleData.of<AppLocale, Translations>(context);
}

/// Method B shorthand via [BuildContext] extension method.
/// Configurable via 'translate_var'.
///
/// Usage (e.g. in a widget's build method):
/// context.t.someKey.anotherKey
extension BuildContextTranslationsExtension on BuildContext {
  Translations get t => TranslationProvider.of(this).translations;
}

/// Manages all translation instances and the current locale
class LocaleSettings
    extends BaseFlutterLocaleSettings<AppLocale, Translations> {
  LocaleSettings._() : super(utils: AppLocaleUtils.instance);

  static final instance = LocaleSettings._();

  // static aliases (checkout base methods for documentation)
  static AppLocale get currentLocale => instance.currentLocale;
  static Stream<AppLocale> getLocaleStream() => instance.getLocaleStream();
  static AppLocale setLocale(AppLocale locale,
          {bool? listenToDeviceLocale = false}) =>
      instance.setLocale(locale, listenToDeviceLocale: listenToDeviceLocale);
  static AppLocale setLocaleRaw(String rawLocale,
          {bool? listenToDeviceLocale = false}) =>
      instance.setLocaleRaw(rawLocale,
          listenToDeviceLocale: listenToDeviceLocale);
  static AppLocale useDeviceLocale() => instance.useDeviceLocale();
  @Deprecated('Use [AppLocaleUtils.supportedLocales]')
  static List<Locale> get supportedLocales => instance.supportedLocales;
  @Deprecated('Use [AppLocaleUtils.supportedLocalesRaw]')
  static List<String> get supportedLocalesRaw => instance.supportedLocalesRaw;
  static void setPluralResolver(
          {String? language,
          AppLocale? locale,
          PluralResolver? cardinalResolver,
          PluralResolver? ordinalResolver}) =>
      instance.setPluralResolver(
        language: language,
        locale: locale,
        cardinalResolver: cardinalResolver,
        ordinalResolver: ordinalResolver,
      );
}

/// Provides utility functions without any side effects.
class AppLocaleUtils extends BaseAppLocaleUtils<AppLocale, Translations> {
  AppLocaleUtils._()
      : super(baseLocale: _baseLocale, locales: AppLocale.values);

  static final instance = AppLocaleUtils._();

  // static aliases (checkout base methods for documentation)
  static AppLocale parse(String rawLocale) => instance.parse(rawLocale);
  static AppLocale parseLocaleParts(
          {required String languageCode,
          String? scriptCode,
          String? countryCode}) =>
      instance.parseLocaleParts(
          languageCode: languageCode,
          scriptCode: scriptCode,
          countryCode: countryCode);
  static AppLocale findDeviceLocale() => instance.findDeviceLocale();
  static List<Locale> get supportedLocales => instance.supportedLocales;
  static List<String> get supportedLocalesRaw => instance.supportedLocalesRaw;
}

// translations

// Path: <root>
class Translations implements BaseTranslations<AppLocale, Translations> {
  /// Returns the current translations of the given [context].
  ///
  /// Usage:
  /// final t = Translations.of(context);
  static Translations of(BuildContext context) =>
      InheritedLocaleData.of<AppLocale, Translations>(context).translations;

  /// You can call this constructor and build your own translation instance of this locale.
  /// Constructing via the enum [AppLocale.build] is preferred.
  Translations.build(
      {Map<String, Node>? overrides,
      PluralResolver? cardinalResolver,
      PluralResolver? ordinalResolver})
      : assert(overrides == null,
            'Set "translation_overrides: true" in order to enable this feature.'),
        $meta = TranslationMetadata(
          locale: AppLocale.ru,
          overrides: overrides ?? {},
          cardinalResolver: cardinalResolver,
          ordinalResolver: ordinalResolver,
        ) {
    $meta.setFlatMapFunction(_flatMapFunction);
  }

  /// Metadata for the translations of <ru>.
  @override
  final TranslationMetadata<AppLocale, Translations> $meta;

  /// Access flat map
  dynamic operator [](String key) => $meta.getTranslation(key);

  late final Translations _root = this; // ignore: unused_field

  // Translations
  late final _StringsStringsRu strings = _StringsStringsRu._(_root);
}

// Path: strings
class _StringsStringsRu {
  _StringsStringsRu._(this._root);

  final Translations _root; // ignore: unused_field

  // Translations
  late final _StringsStringsAuthRu auth = _StringsStringsAuthRu._(_root);
  late final _StringsStringsHomeRu home = _StringsStringsHomeRu._(_root);
  late final _StringsStringsDatingFeedRu dating_feed =
      _StringsStringsDatingFeedRu._(_root);
  late final _StringsStringsCategoryShortRu category_short =
      _StringsStringsCategoryShortRu._(_root);
  late final _StringsStringsCategoryRu category =
      _StringsStringsCategoryRu._(_root);
  late final _StringsStringsActionRu action = _StringsStringsActionRu._(_root);
}

// Path: strings.auth
class _StringsStringsAuthRu {
  _StringsStringsAuthRu._(this._root);

  final Translations _root; // ignore: unused_field

  // Translations
  String get further => '–î–∞–ª–µ–µ';
  String get user_name => 'user name';
  String get email_address => 'email address';
  String get password => 'Password';
  String get first_text_one => 'i forgot ';
  String get first_text_two => 'i have ';
  String get first_text_three => 'i agree ';
  String get second_text_one => 'account ';
  String get second_text_two => 'account ';
  String get second_text_three => 'with ';
  String get third_text_one => 'to Contact';
  String get third_text_two => 'to Contact';
  String get third_text_three => 'Contact';
  String get become_a_friend => '–°—Ç–∞—Ç—å –¥—Ä—É–≥–æ–º';
  String get publication => '–ü—É–±–ª–∏–∫–∞—Ü–∏—è';
  String get favourites => '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ';
  String get comments => '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏';
  String get my_message => '–ú–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ';
  String get hide_photo => '–°–∫—Ä—ã—Ç—å —Ñ–æ—Ç–æ';
  String get share_your_dating_goals => '–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ —Ü–µ–ª—è–º–∏\n–∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞';
  String get add_photos => '–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ—Å–Ω–∏–º–∫–∏';
  String get apply => '–ü—Ä–∏–º–µ–Ω–∏—Ç—å';
  String get date_of_birth => '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è';
  String get thaks => '–ë–ª–∞–≥–æ–¥–∞—Ä—é!';
  String get delete_from_everyone => '–£–¥–∞–ª–∏—Ç—å —É –≤—Å–µ—Ö';
  String get delete_only_from_me => '–£–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ —É –º–µ–Ω—è';
  String get cancel => '–û—Ç–º–µ–Ω–∞';
}

// Path: strings.home
class _StringsStringsHomeRu {
  _StringsStringsHomeRu._(this._root);

  final Translations _root; // ignore: unused_field

  // Translations
  String get category => 'üî• –ö–∞—Ç–µ–≥–æ—Ä–∏—è';
}

// Path: strings.dating_feed
class _StringsStringsDatingFeedRu {
  _StringsStringsDatingFeedRu._(this._root);

  final Translations _root; // ignore: unused_field

  // Translations
  String get hide_photo => '–°–∫—Ä—ã—Ç—å —Ñ–æ—Ç–æ';
}

// Path: strings.category_short
class _StringsStringsCategoryShortRu {
  _StringsStringsCategoryShortRu._(this._root);

  final Translations _root; // ignore: unused_field

  // Translations
  String get passion => 'üî• –°—Ç—Ä–∞—Å—Ç—å';
  String get party => 'üçπ –í–µ—á–µ—Ä–∏–Ω–∫–∞';
  String get family => 'üëºüèª –°–µ–º—å—è';
  String get games => 'üéÆ  –ò–≥—Ä—ã';
  String get creation => 'üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ';
  String get growth => 'ü¶ã –†–∞–∑–≤–∏—Ç–∏–µ';
  String get business => 'üíµ –ë–∏–∑–Ω–µ—Å';
  String get technology => 'üîãÔ∏è –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏';
  String get freedom => 'üíõ  –°–≤–æ–±–æ–¥–∞';
}

// Path: strings.category
class _StringsStringsCategoryRu {
  _StringsStringsCategoryRu._(this._root);

  final Translations _root; // ignore: unused_field

  // Translations
  String get gladness => '–†–∞–¥–æ—Å—Ç—å üòä';
  String get friendship => '–î—Ä—É–∂–±–∞ ü§ù';
  String get love => '–õ—é–±–æ–≤—å ‚ù§Ô∏è';
  String get creation => '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ üé®';
  String get calm => '–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ üåø';
  String get health => '–ó–¥–æ—Ä–æ–≤—å–µ üí™';
  String get journey => '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ üåç';
  String get dreams => '–ú–µ—á—Ç—ã ‚ú®';
  String get comfort => '–£—é—Ç üõãÔ∏è';
  String get kindness => '–î–æ–±—Ä–æ—Ç–∞ üíñ';
  late final _StringsStringsCategorySubcategoryRu subcategory =
      _StringsStringsCategorySubcategoryRu._(_root);
}

// Path: strings.action
class _StringsStringsActionRu {
  _StringsStringsActionRu._(this._root);

  final Translations _root; // ignore: unused_field

  // Translations
  String get write => '–ù–∞–ø–∏—Å–∞—Ç—å üíå';
  String get call => '–ü–æ–∑–≤–æ–Ω–∏—Ç—å üìû';
  String get give => '–ü–æ–¥–∞—Ä–∏—Ç—å üéÅ';
  String get invite => '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å ‚úâÔ∏è';
  String get smile => '–£–ª—ã–±–Ω—É—Ç—å—Å—è üòä';
  String get hug => '–û–±–Ω—è—Ç—å ü§ó';
  String get to_please => '–ü–æ—Ä–∞–¥–æ–≤–∞—Ç—å üéâ';
  String get talk => '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å üí¨';
  String get take_a_walk => '–ü—Ä–æ–≥—É–ª—è—Ç—å—Å—è üö∂‚Äç‚ôÇÔ∏è';
  String get show => '–ü–æ–∫–∞–∑–∞—Ç—å üëÄ';
}

// Path: strings.category.subcategory
class _StringsStringsCategorySubcategoryRu {
  _StringsStringsCategorySubcategoryRu._(this._root);

  final Translations _root; // ignore: unused_field

  // Translations
  String get smile => '–£–ª—ã–±–∫–∞ üôÇ';
  String get happiness => '–°—á–∞—Å—Ç—å–µ üòÅ';
  String get laugh => '–°–º–µ—Ö üòÇ';
  String get dance => '–¢–∞–Ω–µ—Ü üíÉ';
  String get support => '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üí¨';
  String get walk_man => '–ü—Ä–æ–≥—É–ª–∫–∞ üö∂‚Äç‚ôÇÔ∏è';
  String get embrace => '–û–±—ä—è—Ç–∏–µ ü§ó';
  String get fun => '–í–µ—Å–µ–ª—å–µ üéâ';
  String get flirt => '–§–ª–∏—Ä—Ç üòâ';
  String get embraces => '–û–±—ä—è—Ç–∏—è ü§ó';
  String get kiss => '–ü–æ—Ü–µ–ª—É–π üòò';
  String get confession => '–ü—Ä–∏–∑–Ω–∞–Ω–∏–µ üíå';
  String get drawing => '–†–∏—Å–æ–≤–∞–Ω–∏–µ ‚úèÔ∏è';
  String get music => '–ú—É–∑—ã–∫–∞ üé∂';
  String get singing => '–ü–µ–Ω–∏–µ üé§';
  String get meditation => '–ú–µ–¥–∏—Ç–∞—Ü–∏—è üßò‚Äç‚ôÄÔ∏è';
  String get walk_tree => '–ü—Ä–æ–≥—É–ª–∫–∞ üå≥';
  String get reading => '–ß—Ç–µ–Ω–∏–µ üìñ';
  String get inspiration_sunrise => '–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ üåÖ';
  String get yoga => '–ô–æ–≥–∞ üßò‚Äç‚ôÇÔ∏è';
  String get running => '–ë–µ–≥ üèÉ‚Äç‚ôÇÔ∏è';
  String get sport => '–°–ø–æ—Ä—Ç üèãÔ∏è‚Äç‚ôÄÔ∏è';
  String get forces => '–°–∏–ª—ã üîã';
  String get opening => '–û—Ç–∫—Ä—ã—Ç–∏–µ üó∫Ô∏è';
  String get sea => '–ú–æ—Ä–µ üåä ';
  String get mountains => '–ì–æ—Ä—ã üèîÔ∏è';
  String get nature => '–ü—Ä–∏—Ä–æ–¥–∞ üçÉ';
  String get flight => '–ü–æ–ª–µ—Ç üöÄ';
  String get dream => '–ú–µ—á—Ç–∞ üí≠';
  String get hope => '–ù–∞–¥–µ–∂–¥–∞ üåü';
  String get inspiration_rainbow => '–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ üåà';
  String get home => '–î–æ–º üè°';
  String get fireplace => '–ö–∞–º–∏–Ω üî•';
  String get tea => '–ß–∞–π üçµ';
  String get warm => '–¢–µ–ø–ª–æ üß∏';
  String get help => '–ü–æ–º–æ—â—å ü§≤';
  String get gift => '–ü–æ–¥–∞—Ä–æ–∫ üéÅ';
  String get care => '–ó–∞–±–æ—Ç–∞ üïäÔ∏è';
  String get words => '–°–ª–æ–≤–∞ üåª';
}

/// Flat map(s) containing all translations.
/// Only for edge cases! For simple maps, use the map function of this library.

extension on Translations {
  dynamic _flatMapFunction(String path) {
    switch (path) {
      case 'strings.auth.further':
        return '–î–∞–ª–µ–µ';
      case 'strings.auth.user_name':
        return 'user name';
      case 'strings.auth.email_address':
        return 'email address';
      case 'strings.auth.password':
        return 'Password';
      case 'strings.auth.first_text_one':
        return 'i forgot ';
      case 'strings.auth.first_text_two':
        return 'i have ';
      case 'strings.auth.first_text_three':
        return 'i agree ';
      case 'strings.auth.second_text_one':
        return 'account ';
      case 'strings.auth.second_text_two':
        return 'account ';
      case 'strings.auth.second_text_three':
        return 'with ';
      case 'strings.auth.third_text_one':
        return 'to Contact';
      case 'strings.auth.third_text_two':
        return 'to Contact';
      case 'strings.auth.third_text_three':
        return 'Contact';
      case 'strings.auth.become_a_friend':
        return '–°—Ç–∞—Ç—å –¥—Ä—É–≥–æ–º';
      case 'strings.auth.publication':
        return '–ü—É–±–ª–∏–∫–∞—Ü–∏—è';
      case 'strings.auth.favourites':
        return '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ';
      case 'strings.auth.comments':
        return '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏';
      case 'strings.auth.my_message':
        return '–ú–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ';
      case 'strings.auth.hide_photo':
        return '–°–∫—Ä—ã—Ç—å —Ñ–æ—Ç–æ';
      case 'strings.auth.share_your_dating_goals':
        return '–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ —Ü–µ–ª—è–º–∏\n–∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞';
      case 'strings.auth.add_photos':
        return '–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ—Å–Ω–∏–º–∫–∏';
      case 'strings.auth.apply':
        return '–ü—Ä–∏–º–µ–Ω–∏—Ç—å';
      case 'strings.auth.date_of_birth':
        return '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è';
      case 'strings.auth.thaks':
        return '–ë–ª–∞–≥–æ–¥–∞—Ä—é!';
      case 'strings.auth.delete_from_everyone':
        return '–£–¥–∞–ª–∏—Ç—å —É –≤—Å–µ—Ö';
      case 'strings.auth.delete_only_from_me':
        return '–£–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ —É –º–µ–Ω—è';
      case 'strings.auth.cancel':
        return '–û—Ç–º–µ–Ω–∞';
      case 'strings.home.category':
        return 'üî• –ö–∞—Ç–µ–≥–æ—Ä–∏—è';
      case 'strings.dating_feed.hide_photo':
        return '–°–∫—Ä—ã—Ç—å —Ñ–æ—Ç–æ';
      case 'strings.category_short.passion':
        return 'üî• –°—Ç—Ä–∞—Å—Ç—å';
      case 'strings.category_short.party':
        return 'üçπ –í–µ—á–µ—Ä–∏–Ω–∫–∞';
      case 'strings.category_short.family':
        return 'üëºüèª –°–µ–º—å—è';
      case 'strings.category_short.games':
        return 'üéÆ  –ò–≥—Ä—ã';
      case 'strings.category_short.creation':
        return 'üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ';
      case 'strings.category_short.growth':
        return 'ü¶ã –†–∞–∑–≤–∏—Ç–∏–µ';
      case 'strings.category_short.business':
        return 'üíµ –ë–∏–∑–Ω–µ—Å';
      case 'strings.category_short.technology':
        return 'üîãÔ∏è –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏';
      case 'strings.category_short.freedom':
        return 'üíõ  –°–≤–æ–±–æ–¥–∞';
      case 'strings.category.gladness':
        return '–†–∞–¥–æ—Å—Ç—å üòä';
      case 'strings.category.friendship':
        return '–î—Ä—É–∂–±–∞ ü§ù';
      case 'strings.category.love':
        return '–õ—é–±–æ–≤—å ‚ù§Ô∏è';
      case 'strings.category.creation':
        return '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ üé®';
      case 'strings.category.calm':
        return '–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ üåø';
      case 'strings.category.health':
        return '–ó–¥–æ—Ä–æ–≤—å–µ üí™';
      case 'strings.category.journey':
        return '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ üåç';
      case 'strings.category.dreams':
        return '–ú–µ—á—Ç—ã ‚ú®';
      case 'strings.category.comfort':
        return '–£—é—Ç üõãÔ∏è';
      case 'strings.category.kindness':
        return '–î–æ–±—Ä–æ—Ç–∞ üíñ';
      case 'strings.category.subcategory.smile':
        return '–£–ª—ã–±–∫–∞ üôÇ';
      case 'strings.category.subcategory.happiness':
        return '–°—á–∞—Å—Ç—å–µ üòÅ';
      case 'strings.category.subcategory.laugh':
        return '–°–º–µ—Ö üòÇ';
      case 'strings.category.subcategory.dance':
        return '–¢–∞–Ω–µ—Ü üíÉ';
      case 'strings.category.subcategory.support':
        return '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üí¨';
      case 'strings.category.subcategory.walk_man':
        return '–ü—Ä–æ–≥—É–ª–∫–∞ üö∂‚Äç‚ôÇÔ∏è';
      case 'strings.category.subcategory.embrace':
        return '–û–±—ä—è—Ç–∏–µ ü§ó';
      case 'strings.category.subcategory.fun':
        return '–í–µ—Å–µ–ª—å–µ üéâ';
      case 'strings.category.subcategory.flirt':
        return '–§–ª–∏—Ä—Ç üòâ';
      case 'strings.category.subcategory.embraces':
        return '–û–±—ä—è—Ç–∏—è ü§ó';
      case 'strings.category.subcategory.kiss':
        return '–ü–æ—Ü–µ–ª—É–π üòò';
      case 'strings.category.subcategory.confession':
        return '–ü—Ä–∏–∑–Ω–∞–Ω–∏–µ üíå';
      case 'strings.category.subcategory.drawing':
        return '–†–∏—Å–æ–≤–∞–Ω–∏–µ ‚úèÔ∏è';
      case 'strings.category.subcategory.music':
        return '–ú—É–∑—ã–∫–∞ üé∂';
      case 'strings.category.subcategory.singing':
        return '–ü–µ–Ω–∏–µ üé§';
      case 'strings.category.subcategory.meditation':
        return '–ú–µ–¥–∏—Ç–∞—Ü–∏—è üßò‚Äç‚ôÄÔ∏è';
      case 'strings.category.subcategory.walk_tree':
        return '–ü—Ä–æ–≥—É–ª–∫–∞ üå≥';
      case 'strings.category.subcategory.reading':
        return '–ß—Ç–µ–Ω–∏–µ üìñ';
      case 'strings.category.subcategory.inspiration_sunrise':
        return '–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ üåÖ';
      case 'strings.category.subcategory.yoga':
        return '–ô–æ–≥–∞ üßò‚Äç‚ôÇÔ∏è';
      case 'strings.category.subcategory.running':
        return '–ë–µ–≥ üèÉ‚Äç‚ôÇÔ∏è';
      case 'strings.category.subcategory.sport':
        return '–°–ø–æ—Ä—Ç üèãÔ∏è‚Äç‚ôÄÔ∏è';
      case 'strings.category.subcategory.forces':
        return '–°–∏–ª—ã üîã';
      case 'strings.category.subcategory.opening':
        return '–û—Ç–∫—Ä—ã—Ç–∏–µ üó∫Ô∏è';
      case 'strings.category.subcategory.sea':
        return '–ú–æ—Ä–µ üåä ';
      case 'strings.category.subcategory.mountains':
        return '–ì–æ—Ä—ã üèîÔ∏è';
      case 'strings.category.subcategory.nature':
        return '–ü—Ä–∏—Ä–æ–¥–∞ üçÉ';
      case 'strings.category.subcategory.flight':
        return '–ü–æ–ª–µ—Ç üöÄ';
      case 'strings.category.subcategory.dream':
        return '–ú–µ—á—Ç–∞ üí≠';
      case 'strings.category.subcategory.hope':
        return '–ù–∞–¥–µ–∂–¥–∞ üåü';
      case 'strings.category.subcategory.inspiration_rainbow':
        return '–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ üåà';
      case 'strings.category.subcategory.home':
        return '–î–æ–º üè°';
      case 'strings.category.subcategory.fireplace':
        return '–ö–∞–º–∏–Ω üî•';
      case 'strings.category.subcategory.tea':
        return '–ß–∞–π üçµ';
      case 'strings.category.subcategory.warm':
        return '–¢–µ–ø–ª–æ üß∏';
      case 'strings.category.subcategory.help':
        return '–ü–æ–º–æ—â—å ü§≤';
      case 'strings.category.subcategory.gift':
        return '–ü–æ–¥–∞—Ä–æ–∫ üéÅ';
      case 'strings.category.subcategory.care':
        return '–ó–∞–±–æ—Ç–∞ üïäÔ∏è';
      case 'strings.category.subcategory.words':
        return '–°–ª–æ–≤–∞ üåª';
      case 'strings.action.write':
        return '–ù–∞–ø–∏—Å–∞—Ç—å üíå';
      case 'strings.action.call':
        return '–ü–æ–∑–≤–æ–Ω–∏—Ç—å üìû';
      case 'strings.action.give':
        return '–ü–æ–¥–∞—Ä–∏—Ç—å üéÅ';
      case 'strings.action.invite':
        return '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å ‚úâÔ∏è';
      case 'strings.action.smile':
        return '–£–ª—ã–±–Ω—É—Ç—å—Å—è üòä';
      case 'strings.action.hug':
        return '–û–±–Ω—è—Ç—å ü§ó';
      case 'strings.action.to_please':
        return '–ü–æ—Ä–∞–¥–æ–≤–∞—Ç—å üéâ';
      case 'strings.action.talk':
        return '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å üí¨';
      case 'strings.action.take_a_walk':
        return '–ü—Ä–æ–≥—É–ª—è—Ç—å—Å—è üö∂‚Äç‚ôÇÔ∏è';
      case 'strings.action.show':
        return '–ü–æ–∫–∞–∑–∞—Ç—å üëÄ';
      default:
        return null;
    }
  }
}
